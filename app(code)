import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, QPushButton, QStatusBar, QFrame, QTextBrowser, QMessageBox
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtCore import Qt, QTimer, QDateTime, QUrl
from PyQt5.QtNetwork import QNetworkAccessManager, QNetworkRequest
import json

class FireStatusWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("화재 감지 상태")
        self.setGeometry(100, 100, 800, 600)

        # 메인 위젯과 레이아웃 설정
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # 로고 아이콘 설정
        self.logo_label = QLabel(self)
        self.logo_pixmap = QPixmap("fire_icon.png")  # 'fire_icon.png'는 준비된 화재 아이콘 이미지 파일
        self.logo_label.setPixmap(self.logo_pixmap)
        self.logo_label.setAlignment(Qt.AlignCenter)

        # 텍스트 레이블 설정
        self.text_label = QLabel("야외 화재 감지기", self)
        self.text_label.setAlignment(Qt.AlignCenter)
        self.text_label.setFont(QFont('Arial', 20))

        # 현재 화재 상태 레이블 설정
        self.status_label = QLabel("현재 화재 상태: 정상", self)
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setFont(QFont('Arial', 16))

        # 화재 시작 시간 레이블 설정
        self.start_time_label = QLabel("화재 시작 시간: N/A", self)
        self.start_time_label.setAlignment(Qt.AlignCenter)
        self.start_time_label.setFont(QFont('Arial', 14))

        # CCTV 번호와 링크 레이블 설정
        self.cctv_label = QLabel("CCTV 번호: N/A", self)
        self.cctv_label.setAlignment(Qt.AlignCenter)
        self.cctv_label.setFont(QFont('Arial', 14))
        self.cctv_link_label = QTextBrowser(self)
        self.cctv_link_label.setOpenExternalLinks(True)
        self.cctv_link_label.setAlignment(Qt.AlignCenter)
        self.cctv_link_label.setFont(QFont('Arial', 14))

        # 화재 영상/사진 표시 영역 설정
        self.image_frame = QLabel(self)
        self.image_frame.setPixmap(QPixmap("fire_image.png").scaled(400, 300, Qt.KeepAspectRatio))  # 'fire_image.png'는 화재 상황 이미지 파일
        self.image_frame.setFrameShape(QFrame.Box)
        self.image_frame.setLineWidth(2)
        self.image_frame.setAlignment(Qt.AlignCenter)

        # 레이아웃에 추가
        self.layout.addWidget(self.logo_label)
        self.layout.addWidget(self.text_label)
        self.layout.addWidget(self.status_label)
        self.layout.addWidget(self.start_time_label)
        self.layout.addWidget(self.cctv_label)
        self.layout.addWidget(self.cctv_link_label)
        self.layout.addWidget(self.image_frame)

        # 네트워크 매니저 설정
        self.network_manager = QNetworkAccessManager()
        self.network_manager.finished.connect(self.on_response)

        # 화재 상태 체크
        self.check_fire_status()

    def check_fire_status(self):
        request = QNetworkRequest(QUrl("http://your-fire-detector-api.com/status"))
        self.network_manager.get(request)

    def on_response(self, reply):
        data = reply.readAll().data().decode()
        # Assuming the response is a JSON object with status, start_time, cctv fields and image_url
        fire_data = json.loads(data)
        status = fire_data.get('status', 'N/A')
        start_time = fire_data.get('start_time', 'N/A')
        cctv_number = fire_data.get('cctv', 'N/A')
        cctv_link = fire_data.get('cctv_link', '#')
        image_url = fire_data.get('image_url', 'fire_image.png')
        self.update_fire_status(status, start_time, cctv_number, cctv_link, image_url)

    def update_fire_status(self, status, start_time, cctv_number, cctv_link, image_url):
        self.status_label.setText(f"현재 화재 상태: {status}")
        self.start_time_label.setText(f"화재 시작 시간: {start_time}")
        self.cctv_label.setText(f"CCTV 번호: {cctv_number}")
        self.cctv_link_label.setHtml(f'<a href="{cctv_link}">CCTV 링크</a>')
        self.image_frame.setPixmap(QPixmap(image_url).scaled(400, 300, Qt.KeepAspectRatio))

        if status != '정상':
            self.show_alert(status, start_time, cctv_number)

    def show_alert(self, status, start_time, cctv_number):
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Warning)
        alert.setWindowTitle("화재 경보")
        alert.setText(f"화재가 감지되었습니다!\n상태: {status}\n시작 시간: {start_time}\nCCTV 번호: {cctv_number}")
        alert.exec_()

class MyApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        # 메인 위젯 설정
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        # 레이블 설정
        label1 = QLabel('\n야외 화재 감지기-방과후', self)
        label1.setAlignment(Qt.AlignHCenter)
        label1.setFont(QFont('Arial', 20))

        # 버튼 설정
        button = QPushButton('화재 감지 보기', self)
        button.setFont(QFont('Arial', 14))
        button.clicked.connect(self.show_fire_detection)

        # 레이아웃 설정
        layout = QVBoxLayout()
        layout.addWidget(label1)
        layout.addWidget(button)
        central_widget.setLayout(layout)

        # 상태바 설정
        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)

        # 타이머 설정
        timer = QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(1000)  # 1초마다 시간 갱신

        # 초기 시간 표시
        self.showTime()

        # 윈도우 설정
        self.setWindowTitle("야외 화재 감지기")
        self.setGeometry(600, 600, 600, 400)
        self.show()

    def showTime(self):
        current_time = QDateTime.currentDateTime().toString('yyyy-MM-dd hh:mm:ss')
        self.statusBar.showMessage(current_time)

    def show_fire_detection(self):
        self.fire_status_window = FireStatusWindow()
        self.fire_status_window.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MyApp()
    sys.exit(app.exec_())
